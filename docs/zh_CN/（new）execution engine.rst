执行引擎
========

执行引擎是一种执行智能合约的安全沙盒环境，在保证合约安全、执行高效的同时，也应具备编程友好的特性。平台支持HVM（HyperVM）、EVM（HyperEVM）、BVM等智能合约引擎，支持Solidity、Java、Go等编程语言，提供完善的合约生命周期管理。

- ``HVM`` (HyperVM)自研支持 Java 语言、完全自主可控的合约执行引擎。支持符合Java编写规范多种数据结构，尤其是内置数据表结构，可以实现业务数据可视化。另外，HVM可在保证智能合约执行的安全性、确定性、可终止性的前提下，提供一系列灵活的应用模式和工具方法集，以满足复杂多样的业务场景需求，面向广泛的区块链开发人员提供更便捷、灵活、安全的区块链应用开发模式。 
- ``EVM`` (HyperEVM)是利用开源社区在智能合约技术和经验方面的积累，为提高智能合约的重用性而深度重构的、支持solidity合约编写的执行引擎。HyperEVM在保持Solidity开发语言的兼容性基础上，对智能合约虚拟机进行性能优化，保持了以太坊虚拟机的沙盒安全模型，做了充分的容错机制，并进行系统级别的优化，结合环境隔离能够保证合约在有限时间内安全执行，在执行性能方面由逼近二进制原生代码的效率。
- ``BVM`` (Built-in VM)是用于处理内置合约的虚拟机类型。BVM的出现让开发者自主定义一些内置合约（即是合约代码由开发人员预先写好，在平台启动时直接创建对象加载，无需用户手动部署），提供用户所需的专属功能。具有性能优良、无需（额外）部署、权限灵活等特性。

HVM
------
1. HVM概述

由于当前Java语言的流行以及其强大的生态，使用Java语言编写合约无疑会让合约开发更加便捷且易于推广。具体操作上，我们需要给合约提供一个安全沙盒的执行环境不被外界所攻击所打扰，不允许智能合约接触网络、文件系统、进程线程等系统资源，这个安全的沙盒环境我们称之为 **智能合约执行引擎** 。

平台首创自研支持 Java 语言的智能合约执行引擎 HVM，在保证智能合约执行的安全性、确定性、可终止性的前提下，提供了一系列灵活的应用模式和工具方法集，以满足复杂多样的业务场景需求。

2. HVM使用

HVM执行机制从外部来看主要负责合约执行的操作。从sdk调用一笔hvm的合约，首先需要共识模块将通过共识的区块交易发送给执行模块，然后执行模块调用HVM暴露出来的合约接口，最后合约执行完成后会将结果返回，将执行结果写入账本中。在架构层面，HVM主要分为三个部分：最底层的虚拟机模块、上层的库函数支持以及最上层的合约操作模块。

    - 合约操作层
    - 库函数层
    - 虚拟机层
3. HVM优势
    - 支持多级日志
    - 分层调用模式
    - 支持加解密工具
    - 支持合约访问控制
    - 安全沙盒和计步器机制
    
